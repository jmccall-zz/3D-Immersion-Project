3D Immersion Script Reference:

Software:
	Unity3D
		- All the Kinect and Oculus Plugins are contained inside the Unity project
	Oculus SDK -- can be found at developer.oculusvr.com
	Python 2.7
	Visual Studio
	ORCad 
	

GAME SCENES:
ReachBack
	The user is tasked with moving four cylinders placed around him/her into a box in front of the user. Two of the cylinders are on a shelf above the user and the other two are on a counter behind the user. The scene records there position data continuously and stores the time it takes the user to place the objects in the box.

ShoulderROM

Login
	This is the opening scene of our game. The user logs in to the user profile by typing in their name. This either loads an existing profile or creates a new profile. If the profile is new, the game loads the calibrate scene. If not, the game loads the ReachBack scene.

CalibrateGlove
	The CalibrateGlove scene is used in recording data at specific points on the gloves bend sensor range in order to match the sensors input with the game's hand animation. The user is presented an image of a hand that they are supposed to mimic, and then press "Space Bar" to move on to the next image and record that data.

InteractiveObjectRoom
	This is a scene we created for experimenting with the Kinects movement tracking. The user can walk around and interact with objects in a room. It is very simple but it allows us to test the Kinects position tracking for accuracy.

ViewTables

DatabaseView

FirstScene
	This scene is a scene of our original ball game in which the player would essentially play handball in a room and we would record data about how the player throws the ball and such. The physics of the ball proved to be a greater challenge than we initially anticipated and this scene remains largely unfinished.
	
GripStrength

GAME SCRIPTS:
GloveReader.cs -- C#
	The GloveReader is an interface object for reading data from the glove we designed. It has various functions for getting raw data and gesture information from the glove. Unlike most scripts in our project, this one is not a UnityEngine MonoBehaviour it is a C# object that can be instantiated in any other script.
	
	GloveReader.getValues -- Function
		Returns an array of all the raw data from the glove sensors. There is a list of accessor functions (note these are functions not variables) for each data point in the array that describes what that member of the array is.
			GloveReader.RH_IndexFinger	-- Bend Sensors
			GloveReader.RH_MiddleFinger
			GloveReader.RH_RingFinger
			GloveReader.RH_PinkyFinger
			GloveReader.RH_AccX			-- Accelerometer data
			GloveReader.RH_AccY
			GloveReader.RH_AccZ
			GloveReader.LH_IndexFinger	-- Bend Sensors
			GloveReader.LH_MiddleFinger
			GloveReader.LH_RingFinger
			GloveReader.LH_PinkyFinger
			GloveReader.LH_GripIndex	-- Note grip sensors are deprecated for now
			GloveReader.LH_GripMiddle
		
	GloveReader.UpdateGestures -- Function
		Updates the gesture boolean variables (Do this before checking the two variables listed below)
	
	GloveReader.RightIsGrab -- Boolean
		Checks if the right hand is making a grab gesture
	
	GloveReader.LeftIsGrab -- Boolean
		Same is Right but checks the left hand.
	
Menu.js -- Javascript
	Script that creates the escape menu when pressing the 'ESC' key. Loads a menu on key press that has a list of scenes to load as well as a quit button to close the application.
	
GrabLogic.cs -- C#
	Script utilized by the an in-game object attached to the player's hand. The object is an invisible rectangle that we use to determine if the hand is making contact with another object, specifically objects we want to grab. The script checks if the hand is colliding with a cylinder and if the player is making the "grab" gesture. When these conditions are met, the script updates the positions of the cylinders to follow the hand.
	
RecordAndMoveCalibrate.cs -- C#
	Script used by the glove calibration scene that controls the camera and writes the glove calibration data to the User's database profile. When a user presses space it snapshots the readings from the glove bend sensors and moves the camera to the next image.
	
CylinderLogic.cs -- C#
	This is a game object script we use on the cylinder objects in the ReachBack scene. The purpose of this script is to detect when the cylinder has landed in the box and then send a message to the box that is used in keeping track of how many cylinders made it into the box and whether the game is finished. 
	
CylinderCatch.cs -- C#
	This is a game object script we use on the bottom section of our box that we use to check how many cylinders have been caught in the box. When all the cylinders have been caught, we record the time it took in the database. 
	
WristControl.cs -- C#
	This game object script is placed on the user's avatar's wrist. It reads accelerometer data from the GloveReader and then rotates the wrist object of the player accordingly.
	
TextGen.cs -- C#
	This script controls the state of the range of motion scenes exercises. Essentially it describes buttons and text boxes to display during the game the control the scenes' exercise instructions.

DATABASE SCRIPTS:

DatabaseSetup.js -- Javascript
	- path: \3D-Immersion-Project\MainGame\Assets\Scripts\DatabaseSetup.js
	Intro:
		This script is the motor behind the login scene.  It controls what the user sees and also manipulates the database based on user input.

	Start():
		On scene start-up the script checks for the existence of a user profiles table.  If that table does not exist, it is assumed other tables do not aswell.  As a result the entire database will be regenerated and any existing data gone forever.  Unfortunately, in order to make changes to the database schema, the database file itself (as defined in in "dbAccess.js") must be deleted and this script must be executed (by running the Login scene) after the alterations. This results in a fresh, empty database tables with the most recent schema changes.

	OnGUI():
		This is where all the login options are displayed.  Users can also configure some actions to be taken after they are logged in such as whether to force the calibration scene (although calibration data still exists).  This routine also handle user creation and deletion with the help of the database access class dbAccess.js.

dbAccess.js -- Javascript
	- path: \3D-Immersion-Project\MainGame\Assets\Plugins\Database\dbAccess.js
	Intro:
		This is the centralized database access class for this project.  Any and all database manipulations should ultimately be executed with this class. 

	Init:
		The database schema is defined at the top of this file.  All table names, fields, and types are defined here.  Scene names and default user information is also defined here.  In scripts that contain database access routines you will notice a common pattern.
		The database is openned, accessed, and closed with no routines in between.  This is our best effort at preventing access conflicts.

	Functions:
		All the database functions in the file should be referenced in between OpenDB() and CloseDB() calls. 
		C# example:
			private dbAcess db_control = new dbAccess();
			db_control.OpenDB();
			db_control.InsertTimeSeriesRotations(active_user, scene_name, rotation_values);
			db_control.CloseDB();

DATA GRAPH GUI SCRIPTS:

Dependency List -- Python Packages:
	- pyparsing
	- matplotlib
	- numpy
	- python-dateutil
	- pytz
	- six
	- wxPython
	- Python 2.7
	
ReadDB.py
	This script provides an interface to get necessary data from the database without having to specify SQL queries manually. The following is the interface description.
		readDB.dbReader() 
			This function returns a new dbReader object.
		dbReader.readNames()
			Returns a list of strings of all the users names in the database along with the user ID number. The format is <id> <first name> <last name> for example "1 Bob Builder". 
		dbReader.readExerciseTables(id)
			This function takes a user id (obtained in the string from dbReader.readNames()) and returns a list of time series table names for each exercise associated with the given user ID. 
		dbReader.readTimeTables(table_name)
			Takes a string representing the desired time series data table (a list of these are retrieved in the readExerciseTables function) and returns a list with all the datapoints from this time series data table. These data points are XYZ locations of each joint or rotation values of each joint.
			
dbGUI.py
	This script describes a GUI for selecting what user data to graph in the graphing utility. This script should be executed directly in order to run the graphing GUI. In the future this can be compiled into an executable if necessary. Because this is a wxPython module I recommend looking at the wxPython tutorial located here <http://zetcode.com/wxpython/> to help understand how it works. Essentially this program can be thought of as event driven. The user interacts with menus and this causes function calls that progress the GUI to a different state. 
	InitUI() 
		This function creates the wx panel object that we put our GUI widgets into and populates it with the initial widgets. These widgets are as follows:
			- dropdown menu of all the User Names in the database (calls the OnSelect function when clicked)
			- a text box that displays the selected user
			- a button that causes the GUI to progress to the next screen (it calls the SelectDataScreen function when pressed).
	OnSelect(event)
		Updates the static text box to the currently selected User Name from the initial dropdown menu.
	SelectDataScreen(event)
		This function gets called when the button declared in InitUI() is pressed. It takes the user id from the User Name string and uses it to get a list of names for all the time series data tables. These tables are specific to each user and exercise combination. These names are used to populate another dropdown menu for selecting what exercise data you want to look at. This dropdown menu calls the OnSelectTable function when activated.
	OnSelectTable(event)
		This function gets a list of time series data points from the data base for use in graphing. Also a slider widget is created for moving through the graph.
	OnSliderScroll(event)
	
	